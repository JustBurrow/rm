package kr.lul.urs.core.service;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

import java.util.List;

import org.apache.commons.io.IOUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.SpringApplicationConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import kr.lul.urs.core.AbstractApiTest;
import kr.lul.urs.core.CoreTestConfig;
import kr.lul.urs.core.ResourceFileApiUtils;
import kr.lul.urs.core.command.CreateResourceFileCmd;
import kr.lul.urs.core.command.UpdateResourceFileCmd;
import kr.lul.urs.core.dto.ResourceFileDto;
import kr.lul.urs.core.service.internal.OwnershipException;
import kr.lul.urs.spring.tx.Return;
import kr.lul.urs.util.AssertionException;
import kr.lul.urs.util.Randoms;

@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = { CoreTestConfig.class })
public class ResourceFileServiceTest extends AbstractApiTest {
  @Autowired
  private ResourceFileService resourceFileService;

  @Before
  public void setUp() throws Exception {
    this.setClientPlatformAsRandom();

    assertThat(this.resourceFileService).isNotNull();
  }

  @Test
  public void testCreateWithNull() throws Exception {
    assertThatThrownBy(() -> this.resourceFileService.create(null)).isInstanceOf(AssertionException.class);
  }

  @Test
  public void testCreateWithIllegalOwnership() throws Exception {
    // Given
    CreateResourceFileCmd cmd = ResourceFileApiUtils.createCmd(this.clientPlatform);
    cmd.setOwner(1 + cmd.getOwner());

    // When & Then
    assertThatThrownBy(() -> this.resourceFileService.create(cmd)).isInstanceOf(OwnershipException.class);
  }

  @Test
  public void testCreate() throws Exception {
    // Given
    CreateResourceFileCmd cmd = ResourceFileApiUtils.createCmd(this.clientPlatform);

    // When
    ResourceFileDto dto = this.resourceFileService.create(cmd).value();

    // Then
    assertThat(dto).isNotNull();
    assertThat(dto.getId()).isGreaterThan(0);
    assertThat(dto.getOwner()).isEqualTo(this.operator.getId())
        .isEqualTo(cmd.getOwner());
    assertThat(dto.getClientPlatform()).isEqualTo(this.clientPlatform.getId());
    assertThat(dto.getName()).isEqualTo(cmd.getName());
    assertThat(dto.getCurrentRevision()).isEqualTo(0);
    this.assertTimestamp(dto);
  }

  @Test
  public void testReadWithIdNegative() throws Exception {
    assertThat(this.resourceFileService.read(Randoms.negative())).isNull();
  }

  @Test
  public void testReadWithId0() throws Exception {
    assertThat(this.resourceFileService.read(0)).isNull();
  }

  @Test
  public void testReadWithId() throws Exception {
    // Given
    ResourceFileDto expected = ResourceFileApiUtils.create(this.clientPlatform, this.resourceFileService);
    assertThat(expected).isNotNull();

    // When
    Return<ResourceFileDto> actual = this.resourceFileService.read(expected.getId());

    // Then
    assertThat(actual).isNotNull();
  }

  @Test
  public void testList() throws Exception {
    // Given
    ResourceFileDto resourceFile = ResourceFileApiUtils.create(this.clientPlatform, this.resourceFileService);

    // When
    Return<List<ResourceFileDto>> rv = this.resourceFileService.list();
    List<ResourceFileDto> list = rv.value();

    // Then
    assertThat(list).isNotNull()
        .contains(resourceFile);
    assertThat(list.get(list.size() - 1)).isEqualTo(resourceFile)
        .isNotSameAs(resourceFile);
  }

  @Test
  public void testUpdate() throws Exception {
    // Given
    final ResourceFileDto before = ResourceFileApiUtils.create(this.clientPlatform, this.resourceFileService);

    UpdateResourceFileCmd cmd = new UpdateResourceFileCmd();
    cmd.setId(before.getId());
    cmd.setOwner(before.getOwner());
    cmd.setInput();
  }
}
